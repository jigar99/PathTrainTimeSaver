{
  "version": 3,
  "sources": ["../../../src/@awesome-cordova-plugins/core/bootstrap.ts", "../../rxjs/node_modules/tslib/tslib.es6.js", "../../rxjs/src/internal/util/isFunction.ts", "../../rxjs/src/internal/config.ts", "../../rxjs/src/internal/util/hostReportError.ts", "../../rxjs/src/internal/Observer.ts", "../../rxjs/src/internal/util/isObject.ts", "../../rxjs/src/internal/util/UnsubscriptionError.ts", "../../rxjs/src/internal/Subscription.ts", "../../rxjs/src/internal/symbol/rxSubscriber.ts", "../../rxjs/src/internal/Subscriber.ts", "../../rxjs/src/internal/util/canReportError.ts", "../../rxjs/src/internal/util/toSubscriber.ts", "../../rxjs/src/internal/util/identity.ts", "../../rxjs/src/internal/util/pipe.ts", "../../rxjs/src/internal/Observable.ts", "../../rxjs/src/internal/util/ObjectUnsubscribedError.ts", "../../rxjs/src/internal/SubjectSubscription.ts", "../../rxjs/src/internal/Subject.ts", "../../rxjs/src/internal/operators/refCount.ts", "../../rxjs/src/internal/observable/ConnectableObservable.ts", "../../rxjs/src/internal/operators/groupBy.ts", "../../rxjs/src/internal/BehaviorSubject.ts", "../../rxjs/src/internal/scheduler/Action.ts", "../../rxjs/src/internal/scheduler/AsyncAction.ts", "../../rxjs/src/internal/scheduler/QueueAction.ts", "../../rxjs/src/internal/Scheduler.ts", "../../rxjs/src/internal/scheduler/AsyncScheduler.ts", "../../rxjs/src/internal/scheduler/QueueScheduler.ts", "../../rxjs/src/internal/scheduler/queue.ts", "../../rxjs/src/internal/observable/empty.ts", "../../rxjs/src/internal/util/isScheduler.ts", "../../rxjs/src/internal/util/subscribeToArray.ts", "../../rxjs/src/internal/scheduled/scheduleArray.ts", "../../rxjs/src/internal/observable/fromArray.ts", "../../rxjs/src/internal/observable/of.ts", "../../rxjs/src/internal/observable/throwError.ts", "../../rxjs/src/internal/Notification.ts", "../../rxjs/src/internal/operators/observeOn.ts", "../../rxjs/src/internal/ReplaySubject.ts", "../../rxjs/src/internal/AsyncSubject.ts", "../../rxjs/src/internal/util/Immediate.ts", "../../rxjs/src/internal/scheduler/AsapAction.ts", "../../rxjs/src/internal/scheduler/AsapScheduler.ts", "../../rxjs/src/internal/scheduler/asap.ts", "../../rxjs/src/internal/scheduler/async.ts", "../../rxjs/src/internal/scheduler/AnimationFrameAction.ts", "../../rxjs/src/internal/scheduler/AnimationFrameScheduler.ts", "../../rxjs/src/internal/scheduler/animationFrame.ts", "../../rxjs/src/internal/scheduler/VirtualTimeScheduler.ts", "../../rxjs/src/internal/util/ArgumentOutOfRangeError.ts", "../../rxjs/src/internal/util/EmptyError.ts", "../../rxjs/src/internal/util/TimeoutError.ts", "../../rxjs/src/internal/operators/map.ts", "../../rxjs/src/internal/OuterSubscriber.ts", "../../rxjs/src/internal/InnerSubscriber.ts", "../../rxjs/src/internal/util/subscribeToPromise.ts", "../../rxjs/src/internal/symbol/iterator.ts", "../../rxjs/src/internal/util/subscribeToIterable.ts", "../../rxjs/src/internal/util/subscribeToObservable.ts", "../../rxjs/src/internal/util/isPromise.ts", "../../rxjs/src/internal/util/subscribeTo.ts", "../../rxjs/src/internal/util/subscribeToResult.ts", "../../rxjs/src/internal/observable/combineLatest.ts", "../../rxjs/src/internal/innerSubscribe.ts", "../../rxjs/src/internal/operators/mergeMap.ts", "../../rxjs/src/internal/observable/fromEvent.ts", "../../rxjs/src/internal/observable/never.ts", "../../rxjs/src/internal/operators/filter.ts", "../../rxjs/src/internal/observable/race.ts", "../../rxjs/src/internal/observable/zip.ts", "../../../src/@awesome-cordova-plugins/core/decorators/common.ts", "../../../src/@awesome-cordova-plugins/core/util.ts", "../../../src/@awesome-cordova-plugins/core/awesome-cordova-plugin.ts", "../../../src/@awesome-cordova-plugins/core/decorators/cordova.ts", "../../../src/@awesome-cordova-plugins/core/index.ts", "../../../../src/@awesome-cordova-plugins/plugins/vibration/index.ts"],
  "sourcesContent": ["/**\n *\n */\nexport function checkReady() {\n  if (typeof process === 'undefined') {\n    const win: any = typeof window !== 'undefined' ? window : {};\n    const DEVICE_READY_TIMEOUT = 5000;\n\n    // To help developers using cordova, we listen for the device ready event and\n    // log an error if it didn't fire in a reasonable amount of time. Generally,\n    // when this happens, developers should remove and reinstall plugins, since\n    // an inconsistent plugin is often the culprit.\n    const before = Date.now();\n\n    let didFireReady = false;\n    win.document.addEventListener('deviceready', () => {\n      console.log(`Ionic Native: deviceready event fired after ${Date.now() - before} ms`);\n      didFireReady = true;\n    });\n\n    setTimeout(() => {\n      if (!didFireReady && win.cordova) {\n        console.warn(\n          `Ionic Native: deviceready did not fire within ${DEVICE_READY_TIMEOUT}ms. This can happen when plugins are in an inconsistent state. Try removing plugins from plugins/ and reinstalling them.`\n        );\n      }\n    }, DEVICE_READY_TIMEOUT);\n  }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n", "let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n", "/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; }, 0);\n}", "import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n", "export function isObject(x: any): x is Object {\n  return x !== null && typeof x === 'object';\n}\n", "export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nconst UnsubscriptionErrorImpl = (() => {\n  function UnsubscriptionErrorImpl(this: any, errors: any[]) {\n    Error.call(this);\n    this.message = errors ?\n      `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n    return this;\n  }\n\n  UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n  return UnsubscriptionErrorImpl;\n})();\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;", "import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parentOrParents: Subscription | Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (this as any)._ctorUnsubscribe = true;\n      (this as any)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parentOrParents, _ctorUnsubscribe, _unsubscribe, _subscriptions } = (this as any);\n\n    this.closed = true;\n    this._parentOrParents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    if (_parentOrParents instanceof Subscription) {\n      _parentOrParents.remove(this);\n    } else if (_parentOrParents !== null) {\n      for (let index = 0; index < _parentOrParents.length; ++index) {\n        const parent = _parentOrParents[index];\n        parent.remove(this);\n      }\n    }\n\n    if (isFunction(_unsubscribe)) {\n      // It's only possible to null _unsubscribe - to release the reference to\n      // any teardown function passed in the constructor - if the property was\n      // actually assigned in the constructor, as there are some classes that\n      // are derived from Subscriber (which derives from Subscription) that\n      // implement an _unsubscribe method as a mechanism for obtaining\n      // unsubscription notifications and some of those subscribers are\n      // recycled. Also, in some of those subscribers, _unsubscribe switches\n      // from a prototype method to an instance property - see notifyNext in\n      // RetryWhenSubscriber.\n      if (_ctorUnsubscribe) {\n        (this as any)._unsubscribe = undefined;\n      }\n      try {\n        _unsubscribe.call(this);\n      } catch (e) {\n        errors = e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(e.errors) : [e];\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n      let index = -1;\n      let len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          try {\n            sub.unsubscribe();\n          } catch (e) {\n            errors = errors || [];\n            if (e instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(e.errors));\n            } else {\n              errors.push(e);\n            }\n          }\n        }\n      }\n    }\n\n    if (errors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription. Can also be used to add a child subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * When a parent subscription is unsubscribed, any child subscriptions that were added to it are also unsubscribed.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    let subscription = (<Subscription>teardown);\n\n    if (!teardown) {\n      return Subscription.EMPTY;\n    }\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void)>teardown);\n      case 'object':\n        if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          // This also covers the case where `subscription` is `Subscription.EMPTY`, which is always in `closed` state.\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (!(subscription instanceof Subscription)) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default: {\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n      }\n    }\n\n    // Add `this` as parent of `subscription` if that's not already the case.\n    let { _parentOrParents } = subscription;\n    if (_parentOrParents === null) {\n      // If we don't have a parent, then set `subscription._parents` to\n      // the `this`, which is the common case that we optimize for.\n      subscription._parentOrParents = this;\n    } else if (_parentOrParents instanceof Subscription) {\n      if (_parentOrParents === this) {\n        // The `subscription` already has `this` as a parent.\n        return subscription;\n      }\n      // If there's already one parent, but not multiple, allocate an\n      // Array to store the rest of the parent Subscriptions.\n      subscription._parentOrParents = [_parentOrParents, this];\n    } else if (_parentOrParents.indexOf(this) === -1) {\n      // Only add `this` to the _parentOrParents list if it's not already there.\n      _parentOrParents.push(this);\n    } else {\n      // The `subscription` already has `this` as a parent.\n      return subscription;\n    }\n\n    // Optimize for the common case when adding the first subscription.\n    const subscriptions = this._subscriptions;\n    if (subscriptions === null) {\n      this._subscriptions = [subscription];\n    } else {\n      subscriptions.push(subscription);\n    }\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n", "/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber = (() =>\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random())();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n", "import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n", "import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n", "import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n", "export function identity<T>(x: T): T {\n  return x;\n}\n", "import { noop } from './noop';\nimport { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n", "import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   * @deprecated use new Observable() instead\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: null | undefined, error: null | undefined, complete: () => void): Subscription;\n  /** @deprecated Use an observer instead of an error callback */\n  subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Subscription;\n  /** @deprecated Use an observer instead of a complete callback */\n  subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * );\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n", "export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nconst ObjectUnsubscribedErrorImpl = (() => {\n  function ObjectUnsubscribedErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'object unsubscribed';\n    this.name = 'ObjectUnsubscribedError';\n    return this;\n  }\n\n  ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ObjectUnsubscribedErrorImpl;\n})();\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;", "import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n", "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse\n   * @deprecated use new Subject() instead\n  */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n", "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the *publish* operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n", "import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = (() => {\n  const connectableProto = <any>ConnectableObservable.prototype;\n  return {\n    operator: { value: null as null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null as null, writable: true },\n    _connection: { value: null as null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n  };\n})();\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n", "import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the key field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the elementSelector function.\n *\n * ## Examples\n *\n * ### Group objects by id and return as array\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { mergeMap, groupBy, reduce } from 'rxjs/operators';\n *\n * of(\n *   {id: 1, name: 'JavaScript'},\n *   {id: 2, name: 'Parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'TypeScript'},\n *   {id: 3, name: 'TSLint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'JavaScript'},\n * //   { id: 1, name: 'TypeScript'} ]\n * //\n * // [ { id: 2, name: 'Parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'TSLint'} ]\n * ```\n *\n * ### Pivot data on the id field\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\n *\n * of(\n *   { id: 1, name: 'JavaScript' },\n *   { id: 2, name: 'Parcel' },\n *   { id: 2, name: 'webpack' },\n *   { id: 1, name: 'TypeScript' },\n *   { id: 3, name: 'TSLint' }\n * )\n *   .pipe(\n *     groupBy(p => p.id, p => p.name),\n *     mergeMap(group$ =>\n *       group$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\n *     ),\n *     map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\n *  )\n *  .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\n * // { id: 2, values: [ 'Parcel', 'webpack' ] }\n * // { id: 3, values: [ 'TSLint' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n", "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n", "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n", "import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated renamed. Use {@link queueScheduler}\n */\nexport const queue = queueScheduler;\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n", "import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n", "import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  subscriber.complete();\n};\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    let i = 0;\n    sub.add(scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n        return;\n      }\n      subscriber.next(input[i++]);\n      if (!subscriber.closed) {\n        sub.add(this.schedule());\n      }\n    }));\n    return sub;\n  });\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { subscribeToArray } from '../util/subscribeToArray';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return scheduleArray(input, scheduler);\n  }\n}\n", "import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { Observable } from '../Observable';\nimport { scheduleArray } from '../scheduled/scheduleArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\n/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;\n\n// TODO(benlesh): Update the typings for this when we can switch to TS 3.x\nexport function of<T>(a: T): Observable<T>;\nexport function of<T, T2>(a: T, b: T2): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: T[]): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n    return scheduleArray(args as T[], scheduler);\n  } else {\n    return fromArray(args as T[]);\n  }\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```ts\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 2\n * ```ts\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n", "import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { deprecate } from 'util';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: 'N' | 'E' | 'C', public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n", "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```ts\n * import { interval } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n", "import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * A variant of Subject that \"replays\" or emits old values to new subscribers.\n * It buffers a set number of values and will emit those values immediately to\n * any new subscribers in addition to emitting new values to existing subscribers.\n *\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    if (!this.isStopped) {\n      const _events = this._events;\n      _events.push(value);\n      // Since this method is invoked in every next() call than the buffer\n      // can overgrow the max size only by one item\n      if (_events.length > this._bufferSize) {\n        _events.shift();\n      }\n    }\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    if (!this.isStopped) {\n      this._events.push(new ReplayEvent(this._getNow(), value));\n      this._trimBufferThenGetEvents();\n    }\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n", "let nextHandle = 1;\nconst RESOLVED = (() => Promise.resolve())();\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    RESOLVED.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n", "import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```ts\n * import { asapScheduler, asyncScheduler } from 'rxjs';\n *\n * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n * asapScheduler.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n */\nexport const asapScheduler = new AsapScheduler(AsapAction);\n\n/**\n * @deprecated renamed. Use {@link asapScheduler}\n */\nexport const asap = asapScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated renamed. Use {@link asyncScheduler}\n */\nexport const async = asyncScheduler;", "import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```ts\n * // html: <div style=\"background: #0ff;\"></div>\n * import { animationFrameScheduler } from 'rxjs';\n *\n * const div = document.querySelector('div');\n *\n * animationFrameScheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see a div element growing in height\n * ```\n */\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\n\n/**\n * @deprecated renamed. Use {@link animationFrameScheduler}\n */\nexport const animationFrame = animationFrameScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n", "export interface ArgumentOutOfRangeError extends Error {\n}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  new(): ArgumentOutOfRangeError;\n}\n\nconst ArgumentOutOfRangeErrorImpl = (() => {\n  function ArgumentOutOfRangeErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n  }\n\n  ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\n\n  return ArgumentOutOfRangeErrorImpl;\n})();\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = ArgumentOutOfRangeErrorImpl as any;", "export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nconst EmptyErrorImpl = (() => {\n  function EmptyErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'no elements in sequence';\n    this.name = 'EmptyError';\n    return this;\n  }\n\n  EmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n  return EmptyErrorImpl;\n})();\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;", "export interface TimeoutError extends Error {\n}\n\nexport interface TimeoutErrorCtor {\n  new(): TimeoutError;\n}\n\nconst TimeoutErrorImpl = (() => {\n  function TimeoutErrorImpl(this: any) {\n    Error.call(this);\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    return this;\n  }\n\n  TimeoutErrorImpl.prototype = Object.create(Error.prototype);\n\n  return TimeoutErrorImpl;\n})();\n\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link operators/timeout}\n *\n * @class TimeoutError\n */\nexport const TimeoutError: TimeoutErrorCtor = TimeoutErrorImpl as any;\n", "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: R;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n", "import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n", "import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n", "import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n", "export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n", "import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = (iterable as any)[Symbol_iterator]();\n\n  do {\n    let item: IteratorResult<T>;\n    try {\n      item = iterator.next();\n    } catch (err) {\n      subscriber.error(err);\n      return subscriber;\n    }\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n", "import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n", "/**\n * Tests to see if the object is an ES2015 (ES6) Promise\n * @see {@link https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects}\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return !!value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n", "import { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>): (subscriber: Subscriber<T>) => Subscription | void => {\n  if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n", "import { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\nimport { Observable } from '../Observable';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue: undefined,\n  outerIndex: undefined,\n  innerSubscriber: InnerSubscriber<T, R>\n): Subscription | undefined;\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number\n): Subscription | undefined;\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  innerSubscriber: Subscriber<R> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  return subscribeTo(result)(innerSubscriber) as Subscription;\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n\n// If called with a single array, it \"auto-spreads\" the array, with result selector\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, R>(sources: [O1], resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(sources: [O1, O2], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(sources: [O1, O2, O3], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5, O6], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(sources: O[], resultSelector: (...args: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n\n// standard call, but with a result selector\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;\n\n// With a scheduler (deprecated)\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[], scheduler: SchedulerLike): Observable<ObservedValueOf<O>[]>;\n\n// Best case\nexport function combineLatest<O1 extends ObservableInput<any>>(sources: [O1]): Observable<[ObservedValueOf<O1>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6]): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\nexport function combineLatest<O extends ObservableInput<any>>(sources: O[]): Observable<ObservedValueOf<O>[]>;\n\n// Standard calls\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>>(v1: O1, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O extends ObservableInput<any>>(...observables: O[]): Observable<any[]>;\n\n/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>>(...observables: Array<O | SchedulerLike>): Observable<any[]>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike>): Observable<R>;\n\n/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```ts\n * import { combineLatest, timer } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, starWith } from 'rxjs/operators';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(\n  ...observables: (O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike)[]\n): Observable<R> {\n  let resultSelector: ((...values: Array<any>) => R) | undefined =  undefined;\n  let scheduler: SchedulerLike|undefined = undefined;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = observables.pop() as SchedulerLike;\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = observables.pop() as (...values: Array<any>) => R;\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0] as any;\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond?: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, undefined, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete!();\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: R,\n             outerIndex: number): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next!(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector!.apply(this, values);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.destination.next!(result);\n  }\n}\n", "/** @prettier */\nimport { Subscription } from './Subscription';\nimport { Subscriber } from './Subscriber';\nimport { Observable } from './Observable';\nimport { subscribeTo } from './util/subscribeTo';\n\ninterface SimpleOuterSubscriberLike<T> {\n  /**\n   * A handler for inner next notifications from the inner subscription\n   * @param innerValue the value nexted by the inner producer\n   */\n  notifyNext(innerValue: T): void;\n  /**\n   * A handler for inner error notifications from the inner subscription\n   * @param err the error from the inner producer\n   */\n  notifyError(err: any): void;\n  /**\n   * A handler for inner complete notifications from the inner subscription.\n   */\n  notifyComplete(): void;\n}\n\nexport class SimpleInnerSubscriber<T> extends Subscriber<T> {\n  constructor(private parent: SimpleOuterSubscriberLike<any>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this.parent.notifyNext(value);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete();\n    this.unsubscribe();\n  }\n}\n\nexport class ComplexInnerSubscriber<T, R> extends Subscriber<R> {\n  constructor(private parent: ComplexOuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n\nexport class SimpleOuterSubscriber<T, R> extends Subscriber<T> implements SimpleOuterSubscriberLike<R> {\n  notifyNext(innerValue: R): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.destination.complete();\n  }\n}\n\n/**\n * DO NOT USE (formerly \"OuterSubscriber\")\n * TODO: We want to refactor this and remove it. It is retaining values it shouldn't for long\n * periods of time.\n */\nexport class ComplexOuterSubscriber<T, R> extends Subscriber<T> {\n  /**\n   * @param _outerValue Used by: bufferToggle, delayWhen, windowToggle\n   * @param innerValue Used by: subclass default, combineLatest, race, bufferToggle, windowToggle, withLatestFrom\n   * @param _outerIndex Used by: combineLatest, race, withLatestFrom\n   * @param _innerSub Used by: delayWhen\n   */\n  notifyNext(_outerValue: T, innerValue: R, _outerIndex: number, _innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any): void {\n    this.destination.error(error);\n  }\n\n  /**\n   * @param _innerSub Used by: race, bufferToggle, delayWhen, windowToggle, windowWhen\n   */\n  notifyComplete(_innerSub: ComplexInnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n\nexport function innerSubscribe(result: any, innerSubscriber: Subscriber<any>): Subscription | undefined {\n  if (innerSubscriber.closed) {\n    return undefined;\n  }\n  if (result instanceof Observable) {\n    return result.subscribe(innerSubscriber);\n  }\n  let subscription: Subscription;\n  try {\n    subscription = subscribeTo(result)(innerSubscriber) as Subscription;\n  } catch (error) {\n    innerSubscriber.error(error);\n  }\n  return subscription;\n}\n", "import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, ObservedValueOf<O>|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b: any, ii: number) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends SimpleOuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result);\n  }\n\n  private _innerSub(ish: ObservableInput<R>): void {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n    // The returned subscription will usually be the subscriber that was\n    // passed. However, interop subscribers will be wrapped and for\n    // unsubscriptions to chain correctly, the wrapper needs to be added, too.\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete!();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue: R): void {\n    this.destination.next!(innerValue);\n  }\n\n  notifyComplete(): void {\n    const buffer = this.buffer;\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift()!);\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete!();\n    }\n  }\n}\n\n/**\n * @deprecated renamed. Use {@link mergeMap}\n */\nexport const flatMap = mergeMap;", "import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = (() => Object.prototype.toString)();\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n", "import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```ts\n * import { NEVER } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link Observable}\n * @see {@link index/EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Deprecated in favor of using {@link NEVER} constant.\n */\nexport function never () {\n  return NEVER;\n}\n", "import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction, MonoTypeOperatorFunction, TeardownLogic } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n", "import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic, ObservableInput } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n// tslint:disable:max-line-length\nexport function race<A>(arg: [ObservableInput<A>]): Observable<A>;\nexport function race<A, B>(arg: [ObservableInput<A>, ObservableInput<B>]): Observable<A | B>;\nexport function race<A, B, C>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>]): Observable<A | B | C>;\nexport function race<A, B, C, D>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>]): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(arg: [ObservableInput<A>, ObservableInput<B>, ObservableInput<C>, ObservableInput<D>, ObservableInput<E>]): Observable<A | B | C | D | E>;\nexport function race<T>(arg: ObservableInput<T>[]): Observable<T>;\nexport function race(arg: ObservableInput<any>[]): Observable<{}>;\n\nexport function race<A>(a: ObservableInput<A>): Observable<A>;\nexport function race<A, B>(a: ObservableInput<A>, b: ObservableInput<B>): Observable<A | B>;\nexport function race<A, B, C>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>): Observable<A | B | C>;\nexport function race<A, B, C, D>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>): Observable<A | B | C | D>;\nexport function race<A, B, C, D, E>(a: ObservableInput<A>, b: ObservableInput<B>, c: ObservableInput<C>, d: ObservableInput<D>, e: ObservableInput<E>): Observable<A | B | C | D | E>;\n// tslint:enable:max-line-length\n\nexport function race<T>(observables: ObservableInput<T>[]): Observable<T>;\nexport function race(observables: ObservableInput<any>[]): Observable<{}>;\nexport function race<T>(...observables: ObservableInput<T>[]): Observable<T>;\nexport function race(...observables: ObservableInput<any>[]): Observable<{}>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(...observables: ObservableInput<any>[]): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = observables[0] as Observable<any>[];\n    } else {\n      return observables[0] as Observable<T>;\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete!();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        const observable = observables[i];\n        const subscription = subscribeToResult(this, observable, undefined, i)!;\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null!;\n    }\n  }\n\n  notifyNext(_outerValue: T, innerValue: T,\n             outerIndex: number): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null!;\n    }\n\n    this.destination.next!(innerValue);\n  }\n}\n", "import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver, ObservedValueOf } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): Observable<R>;\n\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;\nexport function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;\n\nexport function zip<O extends ObservableInput<any>>(array: O[]): Observable<ObservedValueOf<O>[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: any[]) => R): Observable<R>;\n\nexport function zip<O extends ObservableInput<any>>(...observables: O[]): Observable<ObservedValueOf<O>[]>;\nexport function zip<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```ts\n * import { zip, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<O extends ObservableInput<any>, R>(\n  ...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R)>\n): Observable<ObservedValueOf<O>[]|R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector?: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              private resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    this.unsubscribe();\n\n    if (len === 0) {\n      this.destination.complete!();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        const destination = this.destination as Subscription;\n        destination.add(iterator.subscribe());\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete!();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete!();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next!(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete!();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector!.apply(this, args);\n    } catch (err) {\n      this.destination.error!(err);\n      return;\n    }\n    this.destination.next!(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted(): boolean {\n    const nextResult = this.nextResult;\n    return Boolean(nextResult && nextResult.done);\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends SimpleOuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift()!, done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete!();\n    }\n  }\n\n  notifyNext(innerValue: any): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe() {\n    return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n  }\n}\n", "import { fromEvent, Observable } from 'rxjs';\n\nimport { CordovaOptions } from './interfaces';\n\ndeclare const window: any;\n\nexport const ERR_CORDOVA_NOT_AVAILABLE = { error: 'cordova_not_available' };\nexport const ERR_PLUGIN_NOT_INSTALLED = { error: 'plugin_not_installed' };\n\n/**\n * @param callback\n */\nexport function getPromise<T>(callback: (resolve: Function, reject?: Function) => any): Promise<T> {\n  const tryNativePromise = () => {\n    if (Promise) {\n      return new Promise<T>((resolve, reject) => {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error(\n        'No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.'\n      );\n    }\n  };\n\n  if (typeof window !== 'undefined' && window.angular) {\n    const doc = window.document;\n    const injector = window.angular.element(doc.querySelector('[ng-app]') || doc.body).injector();\n    if (injector) {\n      const $q = injector.get('$q');\n      return $q((resolve: Function, reject: Function) => {\n        callback(resolve, reject);\n      });\n    }\n    console.warn(\n      `Angular 1 was detected but $q couldn't be retrieved. This is usually when the app is not bootstrapped on the html or body tag. Falling back to native promises which won't trigger an automatic digest when promises resolve.`\n    );\n  }\n\n  return tryNativePromise();\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n * @param opts\n */\nexport function wrapPromise(pluginObj: any, methodName: string, args: any[], opts: CordovaOptions = {}) {\n  let pluginResult: any, rej: Function;\n  const p = getPromise((resolve: Function, reject: Function) => {\n    if (opts.destruct) {\n      pluginResult = callCordovaPlugin(\n        pluginObj,\n        methodName,\n        args,\n        opts,\n        (...args: any[]) => resolve(args),\n        (...args: any[]) => reject(args)\n      );\n    } else {\n      pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject);\n    }\n    rej = reject;\n  });\n  // Angular throws an error on unhandled rejection, but in this case we have already printed\n  // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason\n  // to error\n  if (pluginResult && pluginResult.error) {\n    p.catch(() => {});\n    typeof rej === 'function' && rej(pluginResult.error);\n  }\n  return p;\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n * @param opts\n */\nfunction wrapOtherPromise(pluginObj: any, methodName: string, args: any[], opts: any = {}) {\n  return getPromise((resolve: Function, reject: Function) => {\n    const pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts);\n    if (pluginResult) {\n      if (pluginResult.error) {\n        reject(pluginResult.error);\n      } else if (pluginResult.then) {\n        pluginResult.then(resolve).catch(reject);\n      }\n    } else {\n      reject({ error: 'unexpected_error' });\n    }\n  });\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n * @param opts\n */\nfunction wrapObservable(pluginObj: any, methodName: string, args: any[], opts: any = {}) {\n  return new Observable((observer) => {\n    let pluginResult;\n\n    if (opts.destruct) {\n      pluginResult = callCordovaPlugin(\n        pluginObj,\n        methodName,\n        args,\n        opts,\n        (...args: any[]) => observer.next(args),\n        (...args: any[]) => observer.error(args)\n      );\n    } else {\n      pluginResult = callCordovaPlugin(\n        pluginObj,\n        methodName,\n        args,\n        opts,\n        observer.next.bind(observer),\n        observer.error.bind(observer)\n      );\n    }\n\n    if (pluginResult && pluginResult.error) {\n      observer.error(pluginResult.error);\n      observer.complete();\n    }\n    return () => {\n      try {\n        if (opts.clearFunction) {\n          if (opts.clearWithArgs) {\n            return callCordovaPlugin(\n              pluginObj,\n              opts.clearFunction,\n              args,\n              opts,\n              observer.next.bind(observer),\n              observer.error.bind(observer)\n            );\n          }\n          return callCordovaPlugin(pluginObj, opts.clearFunction, []);\n        }\n      } catch (e) {\n        console.warn(\n          'Unable to clear the previous observable watch for',\n          pluginObj.constructor.getPluginName(),\n          methodName\n        );\n        console.warn(e);\n      }\n    };\n  });\n}\n\n/**\n * Wrap the event with an observable\n *\n * @private\n * @param event event name\n * @param element The element to attach the event listener to\n * @returns {Observable}\n */\nfunction wrapEventObservable(event: string, element: any): Observable<any> {\n  element =\n    typeof window !== 'undefined' && element\n      ? get(window, element)\n      : element || (typeof window !== 'undefined' ? window : {});\n  return fromEvent(element, event);\n}\n\n/**\n * Checks if plugin/cordova is available\n *\n * @returns {boolean | { error: string } }\n * @private\n */\nexport function checkAvailability(\n  pluginRef: string,\n  methodName?: string,\n  pluginName?: string\n): boolean | { error: string };\nexport function checkAvailability(\n  pluginObj: any,\n  methodName?: string,\n  pluginName?: string\n): boolean | { error: string };\n/**\n * @param plugin\n * @param methodName\n * @param pluginName\n */\nexport function checkAvailability(plugin: any, methodName?: string, pluginName?: string): boolean | { error: string } {\n  let pluginRef, pluginPackage;\n\n  if (typeof plugin === 'string') {\n    pluginRef = plugin;\n  } else {\n    pluginRef = plugin.constructor.getPluginRef();\n    pluginName = plugin.constructor.getPluginName();\n    pluginPackage = plugin.constructor.getPluginInstallName();\n  }\n\n  const pluginInstance = getPlugin(pluginRef);\n\n  if (!pluginInstance || (!!methodName && typeof pluginInstance[methodName] === 'undefined')) {\n    if (typeof window === 'undefined' || !window.cordova) {\n      cordovaWarn(pluginName, methodName);\n      return ERR_CORDOVA_NOT_AVAILABLE;\n    }\n\n    pluginWarn(pluginName, pluginPackage, methodName);\n    return ERR_PLUGIN_NOT_INSTALLED;\n  }\n\n  return true;\n}\n\n/**\n * Checks if _objectInstance exists and has the method/property\n *\n * @param pluginObj\n * @param methodName\n * @private\n */\nexport function instanceAvailability(pluginObj: any, methodName?: string): boolean {\n  return pluginObj._objectInstance && (!methodName || typeof pluginObj._objectInstance[methodName] !== 'undefined');\n}\n\n/**\n * @param args\n * @param opts\n * @param resolve\n * @param reject\n */\nexport function setIndex(args: any[], opts: any = {}, resolve?: Function, reject?: Function): any {\n  // ignore resolve and reject in case sync\n  if (opts.sync) {\n    return args;\n  }\n\n  // If the plugin method expects myMethod(success, err, options)\n  if (opts.callbackOrder === 'reverse') {\n    // Get those arguments in the order [resolve, reject, ...restOfArgs]\n    args.unshift(reject);\n    args.unshift(resolve);\n  } else if (opts.callbackStyle === 'node') {\n    args.push((err: any, result: any) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(result);\n      }\n    });\n  } else if (opts.callbackStyle === 'object' && opts.successName && opts.errorName) {\n    const obj: any = {};\n    obj[opts.successName] = resolve;\n    obj[opts.errorName] = reject;\n    args.push(obj);\n  } else if (typeof opts.successIndex !== 'undefined' || typeof opts.errorIndex !== 'undefined') {\n    const setSuccessIndex = () => {\n      // If we've specified a success/error index\n      if (opts.successIndex > args.length) {\n        args[opts.successIndex] = resolve;\n      } else {\n        args.splice(opts.successIndex, 0, resolve);\n      }\n    };\n\n    const setErrorIndex = () => {\n      // We don't want that the reject cb gets spliced into the position of an optional argument that has not been\n      // defined and thus causing non expected behavior.\n      if (opts.errorIndex > args.length) {\n        args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index\n      } else {\n        args.splice(opts.errorIndex, 0, reject); // otherwise just splice it into the array\n      }\n    };\n\n    if (opts.successIndex > opts.errorIndex) {\n      setErrorIndex();\n      setSuccessIndex();\n    } else {\n      setSuccessIndex();\n      setErrorIndex();\n    }\n  } else {\n    // Otherwise, let's tack them on to the end of the argument list\n    // which is 90% of cases\n    args.push(resolve);\n    args.push(reject);\n  }\n  return args;\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n * @param opts\n * @param resolve\n * @param reject\n */\nexport function callCordovaPlugin(\n  pluginObj: any,\n  methodName: string,\n  args: any[],\n  opts: any = {},\n  resolve?: Function,\n  reject?: Function\n) {\n  // Try to figure out where the success/error callbacks need to be bound\n  // to our promise resolve/reject handlers.\n  args = setIndex(args, opts, resolve, reject);\n\n  const availabilityCheck = checkAvailability(pluginObj, methodName);\n\n  if (availabilityCheck === true) {\n    const pluginInstance = getPlugin(pluginObj.constructor.getPluginRef());\n    // eslint-disable-next-line prefer-spread\n    return pluginInstance[methodName].apply(pluginInstance, args);\n  } else {\n    return availabilityCheck;\n  }\n}\n\n/**\n * @param pluginObj\n * @param methodName\n * @param args\n * @param opts\n * @param resolve\n * @param reject\n */\nexport function callInstance(\n  pluginObj: any,\n  methodName: string,\n  args: any[],\n  opts: any = {},\n  resolve?: Function,\n  reject?: Function\n) {\n  args = setIndex(args, opts, resolve, reject);\n\n  if (instanceAvailability(pluginObj, methodName)) {\n    // eslint-disable-next-line prefer-spread\n    return pluginObj._objectInstance[methodName].apply(pluginObj._objectInstance, args);\n  }\n}\n\n/**\n * @param pluginRef\n */\nexport function getPlugin(pluginRef: string): any {\n  if (typeof window !== 'undefined') {\n    return get(window, pluginRef);\n  }\n  return null;\n}\n\n/**\n * @param element\n * @param path\n */\nexport function get(element: Element | Window, path: string) {\n  const paths: string[] = path.split('.');\n  let obj: any = element;\n  for (let i = 0; i < paths.length; i++) {\n    if (!obj) {\n      return null;\n    }\n    obj = obj[paths[i]];\n  }\n  return obj;\n}\n\n/**\n * @param pluginName\n * @param plugin\n * @param method\n */\nexport function pluginWarn(pluginName: string, plugin?: string, method?: string): void {\n  if (method) {\n    console.warn(\n      'Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.'\n    );\n  } else {\n    console.warn(`Native: tried accessing the ${pluginName} plugin but it's not installed.`);\n  }\n  if (plugin) {\n    console.warn(`Install the ${pluginName} plugin: 'ionic cordova plugin add ${plugin}'`);\n  }\n}\n\n/**\n * @private\n * @param pluginName\n * @param method\n */\nexport function cordovaWarn(pluginName: string, method?: string): void {\n  if (typeof process === 'undefined') {\n    if (method) {\n      console.warn(\n        'Native: tried calling ' +\n          pluginName +\n          '.' +\n          method +\n          ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator'\n      );\n    } else {\n      console.warn(\n        'Native: tried accessing the ' +\n          pluginName +\n          ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator'\n      );\n    }\n  }\n}\n\n// Fixes a bug in TypeScript 2.9.2 where the ...args is being converted into args: {} and\n// causing compilation issues\nexport type WrapFn = (...args: any[]) => any;\n\n/**\n * @param pluginObj\n * @param methodName\n * @param opts\n * @private\n */\nexport const wrap = (pluginObj: any, methodName: string, opts: CordovaOptions = {}): WrapFn => {\n  return (...args: any[]) => {\n    if (opts.sync) {\n      // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is\n      return callCordovaPlugin(pluginObj, methodName, args, opts);\n    } else if (opts.observable) {\n      return wrapObservable(pluginObj, methodName, args, opts);\n    } else if (opts.eventObservable && opts.event) {\n      return wrapEventObservable(opts.event, opts.element);\n    } else if (opts.otherPromise) {\n      return wrapOtherPromise(pluginObj, methodName, args, opts);\n    } else {\n      return wrapPromise(pluginObj, methodName, args, opts);\n    }\n  };\n};\n\n/**\n * @param pluginObj\n * @param methodName\n * @param opts\n * @private\n */\nexport function wrapInstance(pluginObj: any, methodName: string, opts: any = {}): Function {\n  return (...args: any[]) => {\n    if (opts.sync) {\n      return callInstance(pluginObj, methodName, args, opts);\n    } else if (opts.observable) {\n      return new Observable((observer) => {\n        let pluginResult;\n\n        if (opts.destruct) {\n          pluginResult = callInstance(\n            pluginObj,\n            methodName,\n            args,\n            opts,\n            (...args: any[]) => observer.next(args),\n            (...args: any[]) => observer.error(args)\n          );\n        } else {\n          pluginResult = callInstance(\n            pluginObj,\n            methodName,\n            args,\n            opts,\n            observer.next.bind(observer),\n            observer.error.bind(observer)\n          );\n        }\n\n        if (pluginResult && pluginResult.error) {\n          observer.error(pluginResult.error);\n        }\n\n        return () => {\n          try {\n            if (opts.clearWithArgs) {\n              return callInstance(\n                pluginObj,\n                opts.clearFunction,\n                args,\n                opts,\n                observer.next.bind(observer),\n                observer.error.bind(observer)\n              );\n            }\n            return callInstance(pluginObj, opts.clearFunction, []);\n          } catch (e) {\n            console.warn(\n              'Unable to clear the previous observable watch for',\n              pluginObj.constructor.getPluginName(),\n              methodName\n            );\n            console.warn(e);\n          }\n        };\n      });\n    } else if (opts.otherPromise) {\n      return getPromise((resolve: Function, reject: Function) => {\n        let result;\n        if (opts.destruct) {\n          result = callInstance(\n            pluginObj,\n            methodName,\n            args,\n            opts,\n            (...args: any[]) => resolve(args),\n            (...args: any[]) => reject(args)\n          );\n        } else {\n          result = callInstance(pluginObj, methodName, args, opts, resolve, reject);\n        }\n        if (result && result.then) {\n          result.then(resolve, reject);\n        } else {\n          reject();\n        }\n      });\n    } else {\n      let pluginResult: any, rej: Function;\n      const p = getPromise((resolve: Function, reject: Function) => {\n        if (opts.destruct) {\n          pluginResult = callInstance(\n            pluginObj,\n            methodName,\n            args,\n            opts,\n            (...args: any[]) => resolve(args),\n            (...args: any[]) => reject(args)\n          );\n        } else {\n          pluginResult = callInstance(pluginObj, methodName, args, opts, resolve, reject);\n        }\n        rej = reject;\n      });\n      // Angular throws an error on unhandled rejection, but in this case we have already printed\n      // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason\n      // to error\n      if (pluginResult && pluginResult.error) {\n        p.catch(() => {});\n        typeof rej === 'function' && rej(pluginResult.error);\n      }\n      return p;\n    }\n  };\n}\n", "declare const window: any;\n\n/**\n * @param element\n * @param path\n * @private\n */\nexport function get(element: Element | Window, path: string) {\n  const paths: string[] = path.split('.');\n  let obj: any = element;\n  for (let i = 0; i < paths.length; i++) {\n    if (!obj) {\n      return null;\n    }\n    obj = obj[paths[i]];\n  }\n  return obj;\n}\n\n/**\n * @param callback\n * @private\n */\nexport function getPromise(callback: Function = () => {}): Promise<any> {\n  const tryNativePromise = () => {\n    if (typeof Promise === 'function' || (typeof window !== 'undefined' && window.Promise)) {\n      return new Promise<any>((resolve, reject) => {\n        callback(resolve, reject);\n      });\n    } else {\n      console.error(\n        'No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular or on a recent browser.'\n      );\n    }\n  };\n\n  return tryNativePromise();\n}\n", "import { checkAvailability } from './decorators/common';\nimport { get } from './util';\n\nexport class AwesomeCordovaNativePlugin {\n  static pluginName = '';\n  static pluginRef = '';\n  static plugin = '';\n  static repo = '';\n  static platforms: string[] = [];\n  static install = '';\n\n  /**\n   * Returns a boolean that indicates whether the plugin is installed\n   *\n   * @returns {boolean}\n   */\n  static installed(): boolean {\n    const isAvailable = checkAvailability(this.pluginRef) === true;\n    return isAvailable;\n  }\n\n  /**\n   * Returns the original plugin object\n   */\n  static getPlugin(): any {\n    if (typeof window !== 'undefined') {\n      return get(window, this.pluginRef);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the plugin's name\n   */\n  static getPluginName(): string {\n    const pluginName = this.pluginName;\n    return pluginName;\n  }\n\n  /**\n   * Returns the plugin's reference\n   */\n  static getPluginRef(): string {\n    const pluginRef = this.pluginRef;\n    return pluginRef;\n  }\n\n  /**\n   * Returns the plugin's install name\n   */\n  static getPluginInstallName(): string {\n    const plugin = this.plugin;\n    return plugin;\n  }\n\n  /**\n   * Returns the plugin's supported platforms\n   */\n  static getSupportedPlatforms(): string[] {\n    const platform = this.platforms;\n    return platform;\n  }\n}\n", "import { wrap } from './common';\nimport { CordovaOptions } from './interfaces';\n\n/**\n * @param pluginObj\n * @param methodName\n * @param config\n * @param args\n */\nexport function cordova(pluginObj: any, methodName: string, config: CordovaOptions, args: IArguments | any[]) {\n  return wrap(pluginObj, methodName, config).apply(this, args);\n}\n", "import { checkReady } from './bootstrap';\n\nexport { AwesomeCordovaNativePlugin } from './awesome-cordova-plugin';\n\n// Decorators\nexport { checkAvailability, instanceAvailability, wrap, getPromise } from './decorators/common';\nexport * from './decorators/cordova';\nexport * from './decorators/cordova-function-override';\nexport * from './decorators/cordova-instance';\nexport * from './decorators/cordova-property';\nexport * from './decorators/instance-property';\nexport * from './decorators/interfaces';\n\ncheckReady();\n", "import { Injectable } from '@angular/core';\nimport { Cordova, AwesomeCordovaNativePlugin, Plugin } from '@awesome-cordova-plugins/core';\n\n/**\n * @name Vibration\n * @premier vibration\n * @description Vibrates the device\n * @usage\n * ```typescript\n * import { Vibration } from '@awesome-cordova-plugins/vibration/ngx';\n *\n * constructor(private vibration: Vibration) { }\n *\n * ...\n *\n * // Vibrate the device for a second\n * // Duration is ignored on iOS.\n * this.vibration.vibrate(1000);\n *\n * // Vibrate 2 seconds\n * // Pause for 1 second\n * // Vibrate for 2 seconds\n * // Patterns work on Android and Windows only\n * this.vibration.vibrate([2000,1000,2000]);\n *\n * // Stop any current vibrations immediately\n * // Works on Android and Windows only\n * this.vibration.vibrate(0);\n * ```\n */\n@Plugin({\n  pluginName: 'Vibration',\n  plugin: 'cordova-plugin-vibration',\n  pluginRef: 'navigator',\n  repo: 'https://github.com/apache/cordova-plugin-vibration',\n  platforms: ['Android', 'iOS', 'Windows'],\n})\n@Injectable()\nexport class Vibration extends AwesomeCordovaNativePlugin {\n  /**\n   * Vibrates the device for given amount of time.\n   *\n   * @param time {number|number[]} Milliseconds to vibrate the device. If passed an array of numbers, it will define a vibration pattern. Pass 0 to stop any vibration immediately.\n   */\n  @Cordova({\n    sync: true,\n  })\n  vibrate(time: number | number[]) {}\n}\n"],
  "mappings": "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",
  "names": ["d", "b", "UnsubscriptionErrorImpl", "Subscription", "empty", "Subscriber", "SafeSubscriber", "Observable", "observable", "ObjectUnsubscribedErrorImpl", "SubjectSubscription", "SubjectSubscriber", "Subject", "observable", "AnonymousSubject", "RefCountOperator", "RefCountSubscriber", "refCount", "ConnectableObservable", "ConnectableSubscriber", "RefCountOperator", "RefCountSubscriber", "refCount", "GroupByOperator", "GroupBySubscriber", "GroupDurationSubscriber", "GroupedObservable", "InnerRefCountSubscription", "BehaviorSubject", "Action", "AsyncAction", "QueueAction", "Scheduler", "AsyncScheduler", "QueueScheduler", "empty", "NotificationKind", "Notification", "empty", "ObserveOnOperator", "ObserveOnSubscriber", "ReplaySubject", "ReplayEvent", "AsyncSubject", "AsapAction", "AsapScheduler", "AnimationFrameAction", "AnimationFrameScheduler", "VirtualTimeScheduler", "VirtualAction", "ArgumentOutOfRangeErrorImpl", "EmptyErrorImpl", "TimeoutErrorImpl", "MapOperator", "MapSubscriber", "OuterSubscriber", "InnerSubscriber", "iterator", "CombineLatestOperator", "CombineLatestSubscriber", "observable", "SimpleInnerSubscriber", "ComplexInnerSubscriber", "SimpleOuterSubscriber", "ComplexOuterSubscriber", "MergeMapOperator", "MergeMapSubscriber", "FilterOperator", "FilterSubscriber", "RaceOperator", "RaceSubscriber", "observable", "ZipOperator", "ZipSubscriber", "iterator", "StaticIterator", "iterator", "StaticArrayIterator", "ZipBufferIterator", "observable", "args", "get", "AwesomeCordovaNativePlugin", "get", "config", "__extends", "VibrationOriginal"]
}
